"""
https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/
"""


from typing import List


class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        """
        Build the maximum xor answer from bit by bit. Suppose we have build the
        first k bits of our answer as a, then the next candidate we are looking
        for is c = (a << 1) + 1, which we want the k+1 th bit to still be 1 in
        order to make the answer maximum.

        Then we want to look at the prefix set generated by nums to see if
        there are any 2 prefix p1 and p2 having p1 ^ p2 = c. A trick here is
        that we could check if c ^ p still in p for each p in the prefix set.
        if so, then p1 = c ^ p, p2 = p, p1 ^ p2 = c ^ p ^ p = c ^ 0 = c, which
        means we have found a possible pair of prefixes whose xor is our
        candidate.

        Presumption: the numbers in the input list is ranged in [0, 2^31).
        """
        a = 0
        for i in reversed(range(32)):
            a <<= 1
            c = a + 1
            prefixes = {num >> i for num in nums}
            for p in prefixes:
                if c ^ p in prefixes:
                    a = c
                    break  # Found.

        return a
