"""
https://leetcode.com/problems/minimize-malware-spread-ii/
"""


from typing import Counter


class Solution:
    def minMalwareSpread(
            self, graph: list[list[int]], initial: list[int]) -> int:
        def check(currNode: int) -> None:
            for neighborNode, isConnected in enumerate(graph[currNode]):
                if isConnected and neighborNode in healthyNodes and \
                        neighborNode not in visitedNodes:
                    visitedNodes.add(neighborNode)
                    check(neighborNode)

        N = len(graph)
        healthyNodes = set(range(N)) - set(initial)
        infectedBy = {neighborNode: [] for neighborNode in healthyNodes}

        # Check which healthy node is infected by which infectedNode.
        for infectedNode in initial:
            visitedNodes = set()
            check(infectedNode)
            for neighborNode in visitedNodes:
                infectedBy[neighborNode].append(infectedNode)

        # For each clean node, filter out the nodes that is only infected by
        # one node.
        contributions = Counter()
        for neighborNode, infectedByNodes in infectedBy.items():
            if len(infectedByNodes) == 1:
                contributions[infectedByNodes[0]] += 1

        # Get the node that infects most healthy nodes and that is the answer.
        maxCnt, maxNode = -1, min(initial)
        for infectedNode, cnt in contributions.items():
            if cnt > maxCnt or cnt == maxCnt and infectedNode < maxNode:
                maxCnt, maxNode = cnt, infectedNode

        return maxNode
